<?php

/**
 * @file
 * Contains the leaflet.module file.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;

/**
 * Implements hook_theme().
 */
function leaflet_theme() {
  return [
    'leaflet_map' => [
      'variables' => [
        'map_id' => NULL,
        'height' => '400px',
        'map' => [],
      ],
    ],
  ];
}

/**
 * Get all available Leaflet map definitions.
 *
 * @param string $map
 *   The specific map definition string.
 *
 * @return array
 *   The leaflet maps definition array.
 */
function leaflet_map_get_info($map = NULL) {
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['leaflet_map_info'] = &drupal_static(__FUNCTION__);
  }
  $map_info = &$drupal_static_fast['leaflet_map_info'];

  if (empty($map_info)) {
    if ($cached = \Drupal::cache()->get('leaflet_map_info')) {
      $map_info = $cached->data;
    }
    else {
      $map_info = \Drupal::moduleHandler()->invokeAll('leaflet_map_info');

      // Let other modules alter the map info.
      \Drupal::moduleHandler()->alter('leaflet_map_info', $map_info);

      \Drupal::cache()->set('leaflet_map_info', $map_info);
    }
  }

  if (empty($map)) {
    return $map_info;
  }
  else {
    return $map_info[$map] ?? [];
  }

}

/**
 * Implements hook_leaflet_map_info().
 */
function leaflet_leaflet_map_info() {
  return [
    'OSM Mapnik' =>
      [
        'label' => '- Default Leaflet - OSM Mapnik - ',
        'description' => t('Leaflet default map.'),
        'settings' => [
          'dragging' => TRUE,
          'touchZoom' => TRUE,
          'scrollWheelZoom' => TRUE,
          'doubleClickZoom' => TRUE,
          'zoomControl' => TRUE,
          'zoomControlPosition' => 'topleft',
          'attributionControl' => TRUE,
          'trackResize' => TRUE,
          'fadeAnimation' => TRUE,
          'zoomAnimation' => TRUE,
          'closePopupOnClick' => TRUE,
          'worldCopyJump' => TRUE,
        ],
        'layers' => [
          'OpenStreetMap' => [
            'urlTemplate' => 'https://tile.openstreetmap.org/{z}/{x}/{y}.png',
            'options' => [
              'maxZoom' => 19,
              'attribution' => '&copy; <a href="https://www.openstreetmap.org/copyright" rel="noopener noreferrer">OpenStreetMap</a> contributors',
            ],
          ],
        ],
      ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function leaflet_form_alter(&$form, FormStateInterface $form_state) {
  if (isset($form['#leaflet_widget_geojson_overlays']) &&
    isset($form['#leaflet_widget_geojson_overlays']['widget_id']) &&
    is_array($form['#leaflet_widget_geojson_overlays']['sources_fields'])
  ) {
    $ajax_array = [
      'callback' => 'Drupal\leaflet\Plugin\Field\FieldWidget\LeafletDefaultWidget::updateLeafletWidgetGeoJsonOverlaysAjax',
      'wrapper' => $form['#leaflet_widget_geojson_overlays']['widget_id'],
      'event' => 'change',
    ];
    $source_field_text = t('<div><em>Note: This field is acting as source of Leaflet Widget Map GeoJSON Overlays.</em></div>');
    foreach ($form['#leaflet_widget_geojson_overlays']['sources_fields'] as $form_field) {
      if (is_string($form_field) && isset($form[$form_field])) {
        foreach (Element::children($form[$form_field]['widget']) as &$widget_index) {
          if ($widget_index !== 'add_more') {
            if (isset($form[$form_field]['widget'][$widget_index]['value'])) {
              $form[$form_field]['widget'][$widget_index]['value']['#ajax'] = $ajax_array;
              $form[$form_field]['widget'][$widget_index]['value']['#description'] .= $source_field_text;
            }
            if (isset($form[$form_field]['widget'][$widget_index]['uri'])) {
              $form[$form_field]['widget'][$widget_index]['uri']['#ajax'] = $ajax_array;
              $form[$form_field]['widget'][$widget_index]['uri']['#description'] .= $source_field_text;
            }
          }
        }
      }
    }
  }
}
